// The templates are generated by bicep IaC generator
targetScope = 'subscription'

param location string = 'eastus'
param resourceGroupName string = 'rg-myenv'
param resourceToken string = toLower(uniqueString(subscription().id, location, resourceGroupName))
param containerAppNotesName string = 'notes${resourceToken}'
param mysqlNotesName string = 'notes${resourceToken}'
param mysqlNotesDatabaseName string = 'notes${resourceToken}'
param mysqlNotesAdminName string = 'notesadmin${resourceToken}'
param keyVaultName string = 'kv${resourceToken}'
param containerAppEnvName string = 'env${resourceToken}'
param containerRegistryName string = 'acr${resourceToken}'


// Deploy an Azure Resource Group

resource resourceGroup 'Microsoft.Resources/resourceGroups@2021-04-01' = {
	name: resourceGroupName
	location: location
}

// Deploy an Azure Container App environment

module containerAppEnv 'containerappenv.bicep' = {
	name: 'container-app-env-deployment'
	scope: resourceGroup
	params: {
		location: location
		name: containerAppEnvName
	}
}
var containerAppEnvId = containerAppEnv.outputs.id

// Deploy an Azure Container Registry

module containerRegistry 'containerregistry.bicep' = {
	name: 'container-registry-deployment'
	scope: resourceGroup
	params: {
		location: location
		name: containerRegistryName
	}
}

// Deploy an Azure Container App

module containerAppNotesDeployment 'containerapp.bicep' = {
	name: 'container-app-notes-deployment'
	scope: resourceGroup
	params: {
		location: location
		name: containerAppNotesName 
		containerAppEnvId: containerAppEnvId
		containerRegistryName: containerRegistryName 
		containerEnv: [
			{
				name: 'PORT'
				value: '80'
			}
		] 
		tags: {'azd-service-name': 'notes'}
	}
	dependsOn: [
		containerAppEnv
		containerRegistry
	]
}

// Deploy an Azure MySQL server and with database

module mysqlNotesDeployment 'mysql.bicep' = {
	name: 'mysql-notes-deployment'
	scope: resourceGroup
	params: {
		location: location
		name: mysqlNotesName
		allowIps: concat(containerAppNotesDeployment.outputs.outboundIps)
		databaseName: mysqlNotesDatabaseName
		adminName: mysqlNotesAdminName
		keyVaultName: keyVaultName
		secretName: 'mysql-notes-secret'
	}
	dependsOn: [
		keyVaultDeployment
		containerAppNotesDeployment
	]
}

// Deploy an Azure Keyvault

module keyVaultDeployment 'keyvault.bicep' = {
	name: 'key-vault--deployment'
	scope: resourceGroup
	params: {
		location: location
		name: keyVaultName
		principalIds: [
			containerAppNotesDeployment.outputs.identityPrincipalId
		] 
		allowIps: concat(containerAppNotesDeployment.outputs.outboundIps)
	}
	dependsOn: [
		containerAppNotesDeployment
	]
}

// Deploy an Azure Container App

module containerAppSettingsNotesDeployment 'containerapp.bicep' = {
	name: 'container-app-settings-notes-deployment'
	scope: resourceGroup
	params: {
		location: location
		name: containerAppNotesName 
		secrets: [
			{
				name: 'mysqlnotes-connstr'
				keyVaultUrl: mysqlNotesDeployment.outputs.keyVaultSecretUri
				identity: 'system'
			}
		]
		containerAppEnvId: containerAppEnvId
		containerRegistryName: containerRegistryName 
		containerEnv: [
			{
				name: 'DATABASE_HOST'
				value: mysqlNotesDeployment.outputs.host
			}
			{
				name: 'DATABASE_NAME'
				value: mysqlNotesDatabaseName
			}
			{
				name: 'DATABASE_USER'
				value: mysqlNotesAdminName
			}
			{
				name: 'DATABASE_PASSWORD'
				secretRef: 'mysqlnotes-connstr'
			}
			{
				name: 'DATABASE_PORT'
				value: '3306'
			}
			{
				name: 'AZURE_KEYVAULT_RESOURCEENDPOINT'
				value: keyVaultDeployment.outputs.endpoint
			}
		]
		tags: {'azd-service-name': 'notes'}
	}
	dependsOn: [
		mysqlNotesDeployment
		keyVaultDeployment
	]
}



output containerAppNotesId string = containerAppNotesDeployment.outputs.id
output mysqlNotesId string = mysqlNotesDeployment.outputs.id
output keyVaultId string = keyVaultDeployment.outputs.id
output containerRegistryNotesId string = containerRegistry.outputs.id
output AZURE_CONTAINER_REGISTRY_ENDPOINT string = containerRegistry.outputs.loginServer
